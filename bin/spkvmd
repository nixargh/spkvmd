#!/usr/bin/env ruby
# encoding: utf-8
# small personal kvm daemon
# (*w)
$version = "0.0.2"
##### SETTINGS #####################################################
$params = nil
@conf_dir = 'config'
@bin_dir = 'bin'
@conf_file = 'spkvmd.conf'
##### REQUIRE ######################################################
##### MODULES ######################################################
##### FUNCTIONS ####################################################
def os?
	if RUBY_PLATFORM.downcase.include?("linux")
		$os = 'linux'
	elsif RUBY_PLATFORM.downcase.include?("darwin")
		$os = 'macos'
	else
		ENV['OS'].downcase.include?("windows_nt") ? ($os = 'windows') : ($os = 'unknown')
	end
end

def get_program_root_dir!
        $prog_dir = File.expand_path(File.dirname(__FILE__)).gsub!("/#{@bin_dir}",'')
end

def read_conf!
	if Dir.exist?(@conf_dir)
        	conf_file = $prog_dir + '/' + @conf_dir + '/' + @conf_file
		if File.exist?(conf_file)
			params = Hash.new
			IO.read(conf_file).each_line{|line|
				comment_index = line.index('#')
				line = line[0..comment_index-1] if comment_index
				line.chomp!
				sline = line.split('=')
				params[sline[0]] = find_bool(sline[1].strip)
			}
			puts params if params['debug'] 
			$params = params
		else
			raise "Configuration file (#{conf_file}) not found!"
		end
	else
		raise "Config directory (#{@conf_dir}) not found!"
	end
end

def find_bool(string)
	if string == 'true'
		true
	elsif string == 'false'
		false
	else
		string
	end
end

def quit(session)
	session.close
	puts "\t[#{Thread.current}] - session closed"
end
##### CLASSES ######################################################
class SPKVMD
	def initialize
		begin
			require 'socket'
			@server = TCPServer.new($params['tcp_addr'],$params['tcp_port'])
		rescue
			raise "Can't create new TCPServer: #{$!}"
		end
	end

	def accept_sessions!
		loop do
			if session = @server.accept
				Thread.new do
					Session.new(session)
				end
			end
		end
	end
end

class Session
	def initialize(session)
		@current_lvl = 'ROOT'
		@previous_lvl = nil
		begin
			puts "\t[#{Thread.current}] - session opened"
			session.puts("-= spkvmd welcome you =-")
			loop do
				puts_to_c(session, nil)
				cmd, arg = read_s(session)
				if cmd == 'quit'
					quit(session)
					break
				elsif cmd == 'kvm'
					operate_kvm(session)
				elsif cmd == 'ks'
					session.close
					exit
				else
					puts_to_c(session, 'Unknown command')
				end
			end
			Thread.exit
		rescue
			puts "session initialize error: #{$!}"
		end
	end

private

	def read_s(session)
		session.gets.chomp.split
	end

	def operate_kvm(session)
		chlvl!('KVM_OPERATOR')
		puts "\t\t[#{Thread.current}] - enter #{@current_lvl}"
		puts_to_c(session, nil)
		kvm = KVM.new
		loop do
			cmd, arg = read_s(session)
			if cmd == 'back'
				return_to_lvl!
				puts "\t\t[#{Thread.current}] - exit #{@previous_lvl}"
				break
#			elsif cmd == 'quit'
#				quit(session)
#				break
			elsif cmd == 'list'
				puts_to_c(session, kvm.list)
			elsif cmd == 'start'
				begin
					pid = kvm.start(arg)
					puts "\t\t\t[#{Thread.current}] - VM=#{arg} started (pid=#{pid})"
					puts_to_c(session, "#{arg} - started (#{pid})")
				rescue
					error = $!
					puts "\t\t\t[#{Thread.current}] - failed to start VM=#{arg}: #{error}"
					puts_to_c(session, "#{arg} - failed to start: #{error}")
				end
			else
				puts_to_c(session, 'Unknown command')
			end
		end
	end

	def puts_to_c(session, string)
		session.puts("[#{@current_lvl}]: #{string}")
	end

	def chlvl!(new_lvl)
		@previous_lvl = @current_lvl
        @current_lvl = new_lvl
	end

	def return_to_lvl!
		a = @current_lvl
		@current_lvl = @previous_lvl
		@previous_lvl = a
	end

end

class KVM
	def initialize
		raise "kvm or vm_dir not configured" if !$params['kvm'] || !$params['vm_dir']
		if File.exist?($params['kvm'])
			@kvm_bin = $params['kvm']
		else
			raise "kvm binary not found"
		end
		if Dir.exist?($params['vm_dir'])
			@vm_dir = $params['vm_dir']
		else
			raise "virtual machines directory not found"
		end
	end

	def list
		puts "\t\t\t[#{Thread.current}] - listing vm"
		get_vm_list
	end

	def info(vm)
	end

	def start(vm)
		start_script = "#{$params['vm_dir']}/#{vm}/#{$params['start_script']}"
		start_cmd =  read_start_script(start_script)
		puts "\t\t\t[#{Thread.current}] - starting VM=#{vm}" 
		pid = fork { 
			exec(*start_cmd)
			# i'll never be here
		 }
		#puts "i'm a parent: my_pid=#$$; child_pid=#{pid}" 
		Process.detach(pid)
		sleep 1
		Process.kill(0, pid)
		pid
	end

	def stop(vm)
	end

	def config(vm)
	end

private
	

	def get_vm_list
		vm_list = Dir.entries($params['vm_dir'])
		vm_list.delete('.')
		vm_list.delete('..')
		vm_list
	end

	def read_start_script(file)
		start_cmd = nil
		IO.read(file).each_line{|line|
			if line.index('#') != 0
				start_cmd = line.delete('&')
				start_cmd = start_cmd.split(' ')
				break
			end
		}
		start_cmd ? start_cmd : raise("VM starting string not found")
	end

end
##### PROGRAM ######################################################
begin
	if os? == 'linux'
		get_program_root_dir!
		read_conf!
		spkvmd = SPKVMD.new
		spkvmd.accept_sessions!
	else
		raise "Only for Linux"
	end
rescue
	puts $!
end
