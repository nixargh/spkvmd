#!/usr/bin/env ruby
# encoding: utf-8
# small personal kvm daemon
# (*w)
VERSION = "0.0.4"
##### SETTINGS #####################################################
$params = nil
$kvm_vm_list = nil
@conf_dir = 'config' # config directory
@bin_dir = 'bin' # binary directory
@conf_file = 'spkvmd.conf' # config file name
##### REQUIRE ######################################################
##### MODULES ######################################################
##### FUNCTIONS ####################################################
def os? # detect OS
	if RUBY_PLATFORM.downcase.include?("linux")
		$os = 'linux'
	elsif RUBY_PLATFORM.downcase.include?("darwin")
		$os = 'macos'
	else
		ENV['OS'].downcase.include?("windows_nt") ? ($os = 'windows') : ($os = 'unknown')
	end
end

def get_program_root_dir! # detect program root directory
        $prog_dir = File.expand_path(File.dirname(__FILE__)).gsub!("/#{@bin_dir}",'')
end

def read_conf! # read configuration file
	if Dir.exist?(@conf_dir)
        	conf_file = $prog_dir + '/' + @conf_dir + '/' + @conf_file
		if File.exist?(conf_file)
			params = Hash.new
			IO.read(conf_file).each_line{|line|
				comment_index = line.index('#')
				line = line[0..comment_index-1] if comment_index
				line.chomp!
				sline = line.split('=')
				params[sline[0]] = find_bool(sline[1].strip)
			}
			puts params if params['debug'] 
			$params = params
		else
			raise "Configuration file (#{conf_file}) not found!"
		end
	else
		raise "Config directory (#{@conf_dir}) not found!"
	end
end

def find_bool(string) # convert string to boolean
	if string == 'true'
		true
	elsif string == 'false'
		false
	else
		string
	end
end

##### CLASSES ######################################################
class SPKVMD # main class
	def initialize
		begin
			require 'socket'
			@server = TCPServer.new($params['tcp_addr'],$params['tcp_port'])
		rescue
			raise "Can't create new TCPServer: #{$!}"
		end
	end

	def accept_sessions! # start new thread for each connection
		loop do
			Thread.abort_on_exception=true
			Thread.start(@server.accept) do |session|
				Session.new(session)
				session.close
				puts "\t[#{Thread.current}] - session closed"
			end
		end
	end

	def refresh_kvm_vm_list!
		Thread.new do
			puts "Starting KVM VM list updater..."
			kvm = KVM.new
			loop do
				$kvm_vm_list = kvm.get_vm_list
				puts "\t[KVM_VM_UPDATER] KVM VM list updated."
				sleep 5
			end
		end
	end
end

class Session # class to work with sessions
	def initialize(session)
		@current_lvl = 'ROOT'
		@previous_lvl = nil
		@session = session
		begin
			puts "\t[#{Thread.current}] - session opened"
			@session.puts("-= spkvmd welcome you =-")
			loop do
				puts_to_c(nil)
				cmd, arg = read_s
				if cmd == 'quit'
					break
				elsif cmd == 'kvm'
					operate_kvm
				elsif cmd == 'ks'
					exit
				else
					puts_to_c('Unknown command')
				end
			end
		rescue
			puts "session initialize error: #{$!}"
		end
	end

private

	def read_s # format input from session
		@session.gets.chomp.split
	end

	def operate_kvm # KVM operations
		chlvl!('KVM_OPERATOR')
		puts "\t\t[#{Thread.current}] - enter #{@current_lvl}"
		puts_to_c(nil)
		begin
			kvm = KVM.new
			loop do
				cmd, arg = read_s
				if cmd == 'back'
					return_to_lvl!
					puts "\t\t[#{Thread.current}] - exit #{@previous_lvl}"
					break
				elsif cmd == 'list'
					vm_list = $kvm_vm_list
					puts "\t\t\t[#{Thread.current}] - listing vm: #{vm_list}"
					puts_to_c(vm_list)
				elsif cmd == 'start'
					begin
						vm = arg
						print "\t\t\t[#{Thread.current}] - starting VM=#{vm} - " 
						result = kvm.start(vm)
						if result == []
							puts "[OK]"
							puts_to_c("#{vm} - started")
						else
							raise result.to_s
						end
					rescue
						error = $!
						puts "[FAILED] (#{error})"
						puts_to_c("#{vm} - failed to start: #{error}")
					end
				else
					puts_to_c('Unknown command')
				end
			end
		rescue
			puts "KVM_OPERATOR error: #{$!.backtrace}"
		end
	end

	def puts_to_c(string) # formated output to session
		@session.puts("[#{@current_lvl}]: #{string}")
	end

	def chlvl!(new_lvl) # changing current menu level
		@previous_lvl = @current_lvl
        @current_lvl = new_lvl
	end

	def return_to_lvl! # returning to previos menu level
		a = @current_lvl
		@current_lvl = @previous_lvl
		@previous_lvl = a
	end

end

class KVM # class to work with KVM
	def initialize
		raise "kvm or vm_dir not configured" if !$params['kvm'] || !$params['vm_dir']
		if File.exist?($params['kvm'])
			@kvm_bin = $params['kvm']
		else
			raise "kvm binary not found"
		end
		if Dir.exist?($params['vm_dir'])
			@vm_dir = $params['vm_dir']
		else
			raise "virtual machines directory not found"
		end
	end

	def list # list virtual machines
		get_vm_list
	end

	def info(vm) # information about virtual machine
	end

	def start(vm) # start virtual machine
		result = nil
		start_script = "#{$params['vm_dir']}/#{vm}/#{$params['start_script']}"
		start_cmd =  read_start_script(start_script)
		IO.popen([*start_cmd, :err=>[:child, :out]]){|io|
			result = io.readlines
		}
		result
	end

	def stop(vm) # stop virtual machine
	end

	def config(vm) # configure virtual machine
	end

	def get_vm_list # read subdirectories from virtual machines root directory
		vm_array = Dir.entries($params['vm_dir'])
		vm_array.delete('.')
		vm_array.delete('..')
		vm_list = Hash.new
		vm_array.each{|vm|
			vm_info = Hash.new
			vm_info['status'] = 'stopped'
			pid_file = "#{$params['vm_dir']}/#{vm}/#{$params['pid_file']}"
			socket_file = "#{$params['vm_dir']}/#{vm}/#{$params['socket_file']}"
			if File.exist?(pid_file) 
				vm_info['pid'] = IO.read(pid_file).chomp
				vm_info['status'] = 'running' if IO.read("/proc/#{vm_info['pid']}/statm").split(' ')[2] != 'Z'
			else
				vm_info['pid'] = nil
			end
			if File.exist?(socket_file)
				vm_info['socket'] = socket_file
			else
				vm_info['socket'] = nil
			end
			vm_list[vm] = vm_info
		}
		vm_list
	end

private

	def read_start_script(file) # read script that start virtual machine from virtual machine folder
		start_cmd = nil
		IO.read(file).each_line{|line|
			if line.index('#') != 0
				start_cmd = line.delete('&')
				start_cmd = start_cmd.split(' ')
				break
			end
		}
		start_cmd ? start_cmd : raise("VM starting string not found")
	end

end
##### PROGRAM ######################################################
begin
	if os? == 'linux'
		get_program_root_dir!
		read_conf!
		spkvmd = SPKVMD.new
		spkvmd.refresh_kvm_vm_list!
		spkvmd.accept_sessions!
	else
		raise "Only for Linux"
	end
rescue
	puts $!
end
