#!/usr/bin/env ruby
# encoding: utf-8
# small personal kvm daemon
# (*w)
$version = "0.0.1"
##### SETTINGS #####################################################
$params = nil
@conf_dir = 'config'
@bin_dir = 'bin'
@conf_file = 'spkvmd.conf'
##### REQUIRE ######################################################
##### MODULES ######################################################
##### FUNCTIONS ####################################################
def os?
	if RUBY_PLATFORM.downcase.include?("linux")
		$os = 'linux'
	elsif RUBY_PLATFORM.downcase.include?("darwin")
		$os = 'macos'
	else
		ENV['OS'].downcase.include?("windows_nt") ? ($os = 'windows') : ($os = 'unknown')
	end
end

def get_program_root_dir!
        $prog_dir = File.expand_path(File.dirname(__FILE__)).gsub!("/#{@bin_dir}",'')
end

def read_conf!
	if Dir.exist?(@conf_dir)
        	conf_file = $prog_dir + '/' + @conf_dir + '/' + @conf_file
		if File.exist?(conf_file)
			params = Hash.new
			IO.read(conf_file).each_line{|line|
				comment_index = line.index('#')
				line = line[0..comment_index-1] if comment_index
				line.chomp!
				sline = line.split('=')
				params[sline[0]] = find_bool(sline[1].strip)
			}
			puts params if params['debug'] 
			$params = params
		else
			raise "Configuration file (#{conf_file}) not found!"
		end
	else
		raise "Config directory (#@conf_dir{}) not found!"
	end
end

def find_bool(string)
	if string == 'true'
		true
	elsif string == 'false'
		false
	else
		string
	end
end
##### CLASSES ######################################################
class SPKVMD
	def initialize
		begin
			require 'socket'
			server = TCPServer.new($params['tcp_addr'],$params['tcp_port'])
			loop do
				if session = server.accept
					Thread.new do
						begin
							puts "\t[#{Thread.current}] - session opened"
							session.print("spkvmd welcome you\n")
							loop do
								cmd, arg = read_s(session)
								if cmd == 'quit'
									session.close
									puts "\t[#{Thread.current}] - session closed"
									break
								elsif cmd == 'kvm'
									operate_kvm(session)
								else
									session.puts('Unknown command')
								end
							end
							Thread.close
						rescue
							puts $!
						end
					end
				end
			end
		rescue
			raise "Can't create new TCPServer: #{$!}"
		end
	end

	def read_s(session)
		session.gets.chomp.split
	end

	def operate_kvm(session)
		puts "\t\t[#{Thread.current}] - enter kvm operator"
		session.puts('kvm operator')
		kvm = KVM.new
		loop do
			cmd, arg = read_s(session)
			if cmd == 'quit'
				puts "\t\t[#{Thread.current}] - quit kvm operator"
				break
			elsif cmd == 'list'
				kvm.list
			end
		end
	end
end

class KVM
	def initialize
		raise "kvm or vm_dir not configured" if !$params['kvm'] || !$params['vm_dir']
		if File.exist?($params['kvm'])
			@kvm_bin = $params['kvm']
		else
			raise "kvm not found"
		end
		if Dir.exist?($params['vm_dir'])
			@vm_dir = $params['vm_dir']
		else
			raise "virtual machines directory not found"
		end
	end

	def list
		puts "\t\t\t[#{Thread.current}] - listing vm"
		puts Dir.entries(@vm_dir)	
	end

	def info(vm)
	end

	def start(vm)
	end

	def stop(vm)
	end

	def config(vm)
	end
end
##### PROGRAM ######################################################
begin
	if os? == 'linux'
		get_program_root_dir!
		read_conf!
		SPKVMD.new
	else
		raise "Only for Linux"
	end
rescue
	puts $!
end
