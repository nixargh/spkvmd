#!/usr/bin/env ruby
# encoding: utf-8
# small personal kvm daemon
# (*w)
VERSION = "0.1.1"
##### SETTINGS #####################################################
##### REQUIRE ######################################################
##### MODULES ######################################################
##### FUNCTIONS ####################################################
##### CLASSES ######################################################
class SPKVMD # main class
	def initialize
		$params = nil
		$kvm_vm_list = nil
		@conf_dir = 'config' # config directory
		@bin_dir = 'bin' # binary directory
		@lib_dir = 'lib' # library directory
		@conf_file = 'spkvmd.conf' # config file name
	end

	def os? # detect OS
		if RUBY_PLATFORM.downcase.include?("linux")
			$os = 'linux'
		elsif RUBY_PLATFORM.downcase.include?("darwin")
			$os = 'macos'
		else
			ENV['OS'].downcase.include?("windows_nt") ? ($os = 'windows') : ($os = 'unknown')
		end
	end

	def get_program_root_dir! # detect program root directory
			$prog_dir = File.expand_path(File.dirname(__FILE__)).gsub!("/#{@bin_dir}",'')
	end

	def add_library! # add local library directory to Ruby load path
			$LOAD_PATH.unshift("#{$prog_dir}/#{@lib_dir}")
	end

	def read_conf! # read configuration file
		if Dir.exist?(@conf_dir)
			conf_file = $prog_dir + '/' + @conf_dir + '/' + @conf_file
			if File.exist?(conf_file)
				params = Hash.new
				IO.read(conf_file).each_line{|line|
					comment_index = line.index('#')
					line = line[0..comment_index-1] if comment_index
					line.chomp!
					sline = line.split('=')
					params[sline[0]] = find_bool(sline[1].strip)
				}
				puts params if params['debug'] 
				$params = params
			else
				raise "Configuration file (#{conf_file}) not found!"
			end
		else
			raise "Config directory (#{@conf_dir}) not found!"
		end
	end

	def find_bool(string) # convert string to boolean
		if string == 'true'
			true
		elsif string == 'false'
			false
		else
			string
		end
	end

	def start_listners! # start spkvmd listner
		require 'Listner'
		Thread.new do
			listner = Listner.new('Web', $params['web_listner_tcp_port'])
			listner.accept_web_sessions!
		end
		Thread.new do
			listner = Listner.new('Interactive', $params['interactive_listner_tcp_port'])
			listner.accept_interactive_sessions!
		end
	end

	def start_watcher! # start spkvmd watcher that monitor VM statuses
		require 'Watcher'
		Thread.new do
			Watcher.start!
		end
	end

	def wait_all! # waites for all threads
		Thread.list.each{ |thr| thr.join if thr != Thread.current }
	end
end

##### PROGRAM ######################################################
begin
	spkvmd = SPKVMD.new
	if spkvmd.os? == 'linux'
		spkvmd.get_program_root_dir!
		spkvmd.read_conf!
		spkvmd.add_library!
		spkvmd.start_watcher!
		spkvmd.start_listners!
		spkvmd.wait_all!
	else
		raise "Only for Linux"
	end
rescue
	puts $!
	puts $!.backtrace
end
